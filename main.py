from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String, Boolean, ForeignKey, TIMESTAMP
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker, Session
import os
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
import google.generativeai as genai
from telegram.ext import  CommandHandler, CallbackContext
import requests
from telegram import Bot,Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import json
from fastapi.middleware.cors import CORSMiddleware
import asyncio
from contextlib import asynccontextmanager
import httpx
import urllib.parse

load_dotenv()

genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
TOKEN = os.getenv('TOKEN').strip()
print(TOKEN)

bot_application = Application.builder().token(TOKEN).build()

if not os.getenv('GEMINI_API_KEY'):
    raise ValueError('GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ env —Ñ–∞–π–ª–µ')

DATABASE_URL = 'postgresql://postgres:1337@localhost/tododb'
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit = False, autoflush=False, bind=engine, class_ =Session)
Base = declarative_base()
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer,primary_key=True,index=True)
    username = Column(String(50),unique=True,nullable=False)
    email = Column(String(100),unique=True,nullable=False)
    password_hash = Column(String(128), nullable=False)
    telegram_chat_id = Column(String(50),unique=True)
class Task(Base): 
    __tablename__= 'tasks'
    id = Column(Integer, primary_key = True, index=True)
    user_id = Column(Integer,ForeignKey('users.id'))
    title = Column(String(255),nullable=False)
    description = Column(String)
    priority = Column(Integer, default=3)
    due_date = Column(TIMESTAMP)
    is_completed = Column(Boolean, default=False)
    ai_comment = Column(String)
    parent_id = Column(Integer, ForeignKey('tasks.id', ondelete='CASCADE'), nullable=True, index = True)

Base.metadata.create_all(bind=engine)


async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n–Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏."
    )

async def add_task(update:Update, context:CallbackContext):
    task_title = ' '.join(context.args)
    if not task_title:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /addtask –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ')
        return
    fastapi_url = 'http://localhost:8000/tasks'
    payload = {
        "title": task_title,
        "description": '–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram',
        "due_date": None,
        "parent_id": None
    }

    try: 
        async with httpx.AsyncClient() as client:
            response = await client.post(fastapi_url, json=payload)
        if response.status_code == 200:
            response_data = response.json()
            ai_advice = response_data.get('ai_advice', '–°–æ–≤–µ—Ç –æ—Ç –ò–ò –Ω–µ –ø–æ–ª—É—á–µ–Ω')
            await update.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"üß† –°–æ–≤–µ—Ç –æ—Ç –ò–ò: {ai_advice}"
            )
        else: 
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
            )
    except httpx.RequestError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º FastAPI: {e}"
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        )
async def add_subtask(update: Update, context: CallbackContext):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /add_subtask –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –í–∑—è—Ç—å –¥–µ–Ω—å–≥–∏')
        return
    subtask_title = args[-1]
    parent_task_name = ' '.join(args[:-1])
    if not parent_task_name or not subtask_title:
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /add_subtask –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –í–∑—è—Ç—å –¥–µ–Ω—å–≥–∏')
        return
    with SessionLocal() as db:
        parent_task = db.query(Task).filter(Task.title.ilike(parent_task_name)).first()
        if not parent_task:
            await update.message.reply_text(f'‚ùå –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{parent_task_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return
        fastapi_url = 'http://localhost:8000/tasks'
        payload = {
            "title": subtask_title,
            "description": f'–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø–æ–¥–∑–∞–¥–∞—á–∞ –¥–ª—è "{parent_task_name}" —á–µ—Ä–µ–∑ Telegram',
            "due_date": None,
            "parent_id": parent_task.id
        }
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(fastapi_url, json=payload)
            if response.status_code == 200:
                response_data = response.json()
                ai_advice = response_data.get('ai_advice', '–°–æ–≤–µ—Ç –æ—Ç –ò–ò –Ω–µ –ø–æ–ª—É—á–µ–Ω')
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–¥–∑–∞–¥–∞—á–∞ '{subtask_title}' –¥–ª—è –∑–∞–¥–∞—á–∏ '{parent_task_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                    f"üß† –°–æ–≤–µ—Ç –æ—Ç –ò–ò: {ai_advice}"
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É. –û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                )
        except httpx.RequestError as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º FastAPI: {e}"
            )
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            )
async def delete_task_command(update: Update, context: CallbackContext):
    task_delete = " ".join(context.args)
    if not task_delete:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /deletetask –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
        )
        return
    
    encoded_task_delete = urllib.parse.quote(task_delete)
    fastapi_url = f"http://localhost:8000/tasks/task-title/{encoded_task_delete}"


    try:
        async with httpx.AsyncClient() as client:
            response = await client.delete(fastapi_url)

        if response.status_code == 200:
            await update.message.reply_text(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {task_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        elif response.status_code == 404:
            await update.message.reply_text(f"‚ùå –ó–∞–¥–∞—á–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {task_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
            )
    except httpx.RequestError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º FastAPI: {e}"
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        )
async def show_tasks(update: Update, context: CallbackContext):
    message_text = "<b> –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:</b>\n\n"
    with SessionLocal() as db: 
        parent_tasks = db.query(Task).filter(Task.parent_id==None).order_by(Task.is_completed,Task.id).all()
    if not parent_tasks:
        message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é!"
    else: 
        task_lines = []
        for task in parent_tasks:
                status_icon = '‚úÖ' if task.is_completed else ""
                task_lines.append(f'{status_icon} {task.title}')
                if task.description:
                    task_lines.append(f'  <i>{task.description}</i>')
                if task.ai_comment:
                    task_lines.append(f'  üß†: {task.ai_comment}')
                sub_tasks = db.query(Task).filter(Task.parent_id==task.id).order_by(Task.is_completed,Task.id).all()
                if sub_tasks:
                    for sub_task in sub_tasks:
                        sub_status_icon = '‚úÖ' if sub_task.is_completed else ""
                        task_lines.append(f'  <code>{sub_status_icon} ‚îî‚îÄ {sub_task.title}</code>')
                        if sub_task.description:
                            task_lines.append(f'    <code>  <i>{sub_task.description}</i></code>')
                        if sub_task.ai_comment:
                            task_lines.append(f'    <code>  üß†: {sub_task.ai_comment}</code>')
                task_lines.append("")
        message_text +='\n'.join(task_lines)
    await update.message.reply_html(message_text)
@asynccontextmanager
async def lifespan(app):
 
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞...")

    bot_application.add_handler(CommandHandler("start", start))
    bot_application.add_handler(CommandHandler("tasks", show_tasks))
    bot_application.add_handler(CommandHandler("add_task", add_task))
    bot_application.add_handler(CommandHandler("delete_task", delete_task_command))
    bot_application.add_handler(CommandHandler("add_subtask", add_subtask))

    await bot_application.initialize()

    await bot_application.start()

    await bot_application.updater.start_polling()
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ FastAPI.")

    yield

  
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –≤—ã–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞...")

    await bot_application.updater.stop()

    await bot_application.stop()

    await bot_application.shutdown()
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


app = FastAPI(lifespan=lifespan)


origins = [
    "http://localhost",
    "http://localhost:3000",
]

app.add_middleware(CORSMiddleware,allow_origins=origins,allow_credentials=True,allow_methods=['*'], allow_headers=['*'])


class TaskCreate(BaseModel):
    title: str
    description: str | None=None
    priority: int | None=3
    due_date: datetime | None = None
    parent_id: int | None=None
class TaskUpdate(BaseModel):
    title:str | None=None
    description: str | None=None
    priority: int | None=None
    due_date: datetime | None = None
    is_completed: bool | None = None 
    parent_id: int | None = None
def get_db(): 
    db = SessionLocal()
    try:
        yield db
    finally: 
        db.close()
        
        

def get_ai_comment(task_title:str)-> str:
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        prompt = f"–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∏–ª–∏ –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ: '{task_title}'."
        response = model.generate_content(prompt)
        if response.text:
            return response.text.strip()
        else:
            return '–ù–µ—Ç –æ–≤—Ç–µ—Ç–∞ –æ—Ç –ò–ò'
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç Gemini: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."


@app.post('/tasks')
def create_task(task:TaskCreate, db: Session = Depends(get_db)):
    db_task = Task(**task.dict())
    db_task.ai_comment = get_ai_comment(task.title)
    db.add(db_task)
    db.commit()
    db.refresh(db_task)
    return {'message': 'Task created', 'ai_advice':db_task.ai_comment, 'task': db_task}

@app.get('/tasks')
def get_tasks(db: Session = Depends(get_db)):
    return db.query(Task).all()

@app.delete('/tasks/{task_id}')
def delete_task(task_id, db: Session = Depends(get_db)):
    db_task = db.query(Task).filter(Task.id == task_id).first()
    if db_task is None: 
        raise HTTPException(status_code=404,detail='Task not found')
    db.delete(db_task)
    db.commit()
    return {'message:' f'Task delete {task_id}'}
@app.delete('/tasks/task-title/{task_title}')
def delete_tasks_title(task_title, db:Session = Depends(get_db)):
    task_to_delete = db.query(Task).filter(Task.title.ilike(task_title)).all()
    tasks_to_delete_sort = sorted([task.id for task in task_to_delete],reverse=True)
    if not task_to_delete:
      print('tasks not found')
    for task_id in tasks_to_delete_sort:
        found_task = db.query(Task).filter(Task.id==task_id).first()
        if found_task:
            sub_tasks = db.query(Task).filter(Task.parent_id == found_task.id).all()
            for sub_task in sub_tasks:
                db.delete(sub_task)
                
            db.delete(found_task)
    db.commit()
    return{'message': 'delete task'}


@app.put('/tasks/{task_id}/complete')
def complete_task(task_id,db: Session = Depends(get_db)):
    db_task = db.query(Task).filter(Task.id == task_id).first()
    if db_task is None: 
        raise HTTPException(status_code=404,detail='Task not found')
    db_task.is_completed = True
    db.commit()
    db.refresh(db_task)
    return {"message: f'Task copmleted with id {task_id}'"}
@app.put('/tasks/{task_id}/uncomplete')
def uncomplete_task(task_id,db: Session = Depends(get_db)):
    db_task = db.query(Task).filter(Task.id == task_id).first()
    if db_task is None: 
        raise HTTPException(status_code=404,detail='Task not found')
    db_task.is_completed = False
    db.commit()
    db.refresh(db_task)
    return {"message: f'Task copmleted with id {task_id}'"}

@app.put('/tasks/{task_id}')
def update_task(task_id, task: TaskUpdate, db: Session = Depends(get_db)):
    db_task = db.query(Task).filter(Task.id == task_id).first()
    if db_task is None:
        raise HTTPException(status_code=404, detail='Task not found')
    for field, value in task.dict().items():
        setattr(db_task, field, value)
    if task.title is not None and task.title !=db_task.title:
        db_task.ai_comment = get_ai_comment(task.title)
    db.commit()
    db.refresh(db_task)
    return {'message': f'Task updated {task_id}', 'task': db_task}
